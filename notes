 const nameInput = document.getElementById('inputName');
  const emailInput = document.getElementById('inputEmail');

  const isValidName = (name) => name.trim().length > 0;
  const isValidEmail = (email) => /\w+@\w+/.test(email.trim());

  const validateInputs = () => {
    const name = nameInput.value;
    const email = emailInput.value;
    // 4 задача ********************************

    const subbutton = document.querySelector('input[type="submit"]');

    // 4 задача ********************************

    // Валидация имени
    if (isValidName(name)) {
      nameInput.classList.add('is-valid');
      nameInput.classList.remove('is-invalid');
    } else {
      nameInput.classList.add('is-invalid');
      nameInput.classList.remove('is-valid');
    }

    // Валидация email
    if (isValidEmail(email)) {
      emailInput.classList.add('is-valid');
      emailInput.classList.remove('is-invalid');
    } else {
      emailInput.classList.add('is-invalid');
      emailInput.classList.remove('is-valid');
    }

    // 4 задача ********************************
    // изменение статуса кнопки submit
    if (isValidName(name) && isValidEmail(email)) {
      subbutton.disabled = false;
    } else {
      subbutton.disabled = true;
    }

  // 4 задача ********************************
  };

  // Добавление обработчиков событий на инпуты
  nameInput.addEventListener('input', validateInputs);
  emailInput.addEventListener('input', validateInputs);
  // 3 задача ************************************
};


const validateName = (name) => (name.trim().length ? [] : ['name cannot be empty']);
const validateEmail = (email) => (/\w+@\w+/.test(email) ? [] : ['invalid email']);
const validateField = (fieldname, data) => (fieldname === 'name' ? validateName(data) : validateEmail(data));
 const form = document.querySelector('form');
  const submit = document.querySelector('[type="submit"]');

  const watchedState = onChange(state, (path) => {
    const selector = path.split('.')[1];
    const input = document.querySelector(`[name=${selector}]`);
    if (validateField(selector, state.values[selector]).length === 0) {
      input.classList.remove('is-invalid');
      input.classList.add('is-valid');
    } else {
      input.classList.remove('is-valid');
      input.classList.add('is-invalid');
    }
    submit.disabled = state.errors.name.length !== 0 || state.errors.email.length !== 0;
  });

  form.addEventListener('input', (e) => {
    e.preventDefault();
    const targetName = e.target.name;
    const data = new FormData(form).get(targetName);
    watchedState.values[targetName] = data;
    watchedState.errors[targetName] = validateField(targetName, data);
  });

  form.addEventListener('submit', (e) => {
    e.preventDefault();
    axios.post('/users', state.values)
      .then((resp) => {
        document.body.innerHTML = `<p>${resp.data.message}</p>`;
      })
      .catch((error) => {
        console.log(error);
      });
  });
};
